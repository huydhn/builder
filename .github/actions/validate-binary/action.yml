name: 'validate-binary'
description: 'Binary Conda or Wheel Validation for Linux and MacOS'
inputs:
  gpu_arch_type:
    description: 'GPU arch type'
    required: true
    default: 'cpu'
  gpu_arch_ver:
    description: 'GPU arch version'
    required: true
    default: 'cpu'
  installation:
    description: 'Installation instructions'
    required: true
    default: ''
  installation_pypi:
    description: 'Installation instructions for pypi'
    required: false
    default: ''
  python_version:
    description: 'Python version'
    required: true
    default: '3.9'
  desired_cuda:
    description: 'Desired CUDA'
    required: true
    default: 'cpu'
  dev_toolset:
    description: 'Dev Toolset'
    required: false
    default: ''
  package_type:
    description: 'Package Type'
    required: true
    default: 'conda'
  target_os:
    description: 'Target OS linux or macos'
    required: false
    default: 'linux'
runs:
  using: "composite"
  steps:
    - name: Checkout PyTorch builder
      uses: actions/checkout@v2
    - name: Check nvidia smi
      if: ${{ inputs.gpu_arch_type == 'cuda' }}
      shell: bash
      run: |
        nvidia-smi
    - name: Install Conda Linux
      if: ${{ inputs.target_os == 'linux' && inputs.python_version != '3.11' }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ inputs.python_version }}
        auto-update-conda: true
        miniconda-version: "latest"
        activate-environment: testenv
    - name: Install Conda MacOS
      if: ${{ inputs.target_os == 'macos' }}
      uses: pytorch/test-infra/.github/actions/setup-miniconda@main
    - name: Install PyTorch and run tests
      shell: bash
      env:
        GPU_ARCH_VER: ${{ inputs.gpu_arch_ver }}
        GPU_ARCH_TYPE: ${{ inputs.gpu_arch_type }}
        INSTALLATION: ${{ inputs.installation }}
        INSTALLATION_PYPI: ${{ inputs.installation_pypi }}
        ENV_NAME: conda-env-${{ github.run_id }}
        DESIRED_PYTHON: ${{ inputs.python_version }}
        DESIRED_CUDA: ${{ inputs.desired_cuda }}
        DESIRED_DEVTOOLSET: ${{ inputs.dev_toolset }}
        PACKAGE_TYPE: ${{ inputs.package_type }}
        TARGET_OS: ${{ inputs.target_os }}
      run: |

        # Special case Python 3.11 wheels
        if [ $DESIRED_PYTHON == '3.11' ]; then
          set -ex
          export CPYTHON_VERSIONS=3.11.0
          sudo apt-get install build-essential gdb lcov libbz2-dev libffi-dev \
          libgdbm-dev liblzma-dev libncurses5-dev libreadline6-dev \
          libsqlite3-dev libssl-dev lzma lzma-dev tk-dev uuid-dev zlib1g zlib1g-dev -y

          export PYTHON_PATH="/opt/_internal/cpython-3.11.0rc2/bin/"
          export PIP_PATH="${PYTHON_PATH}/pip"
          export PIP_INSTALLATION="${INSTALLATION/pip3/"$PIP_PATH"}"
          ./common/install_cpython.sh

          eval ${PYTHON_PATH}/python --version
          eval ${PIP_INSTALLATION}
          eval ${PYTHON_PATH}/python ./test/smoke_test/smoke_test.py --package torchonly
        else
          set -ex

          # Special case Pypi installation instructions
          if [ ! -z "${INSTALLATION_PYPI}" ]; then
            conda create -yp ${ENV_NAME}_pypi python=${{ inputs.python_version }} numpy
            conda run -p ${ENV_NAME}_pypi $INSTALLATION_PYPI
            conda run -p ${ENV_NAME}_pypi python3 ./test/smoke_test/smoke_test.py --package torchonly
            conda env remove -p ${ENV_NAME}_pypi
          fi

          conda create -yp ${ENV_NAME} python=${{ inputs.python_version }} numpy
          conda run -p ${ENV_NAME} $INSTALLATION
          conda run -p ${ENV_NAME} python3  ./test/smoke_test/smoke_test.py
          export LD_LIBRARY_PATH="$(dirname $(which python))/lib"
          export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib
          conda run -p ${ENV_NAME} env LD_LIBRARY_PATH=$LD_LIBRARY_PATH bash ${PWD}/check_binary.sh
          conda env remove -p ${ENV_NAME}
        fi
